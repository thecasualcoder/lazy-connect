#!/bin/bash

TOTP_MODE=${LAZY_CONNECT_TOTP_GENERATOR:-oathtool}

_lazy_connect_config_dir=~/.config/lazy-connect
_lazy_connect_project_dir=~/.lazy-connect

function _lazy_connect_init() {
  case $TOTP_MODE in
  oathtool)
    echo -n "Secret Key: "
    read -s secret_key
    echo "**********"

    echo 'Storing secret in keychain...'
    old_secret=~/.config/lazy-connect/secret
    [ -f "$old_secret" ] && rm "$old_secret"
    security delete-generic-password -a lazy-connect -s lazy-connect &>/dev/null
    security add-generic-password -a lazy-connect -p "$secret_key" -s lazy-connect
    ;;
  esac
  _lazy_connect_vpn_refresh
}

function _lazy_connect_vpn_refresh() {
  local backup_file=/tmp/lazy-connect-vpns-$(date +%-H-%M-%S-%F)
  [ -f $_lazy_connect_config_dir/vpns ] && cp $_lazy_connect_config_dir/vpns $backup_file
  osascript <<EOF |
    tell application "System Events"
      tell process "SystemUIServer"
        set vpnMenu to (menu bar item 1 of menu bar 1 where description is "VPN")
        tell vpnMenu to click
        set vpnMenuItems to (menu items of menu 1 of vpnMenu)
        -- Loop till first missing value(that is fisrt menu item seperator) and accumulate VPN Names
        set vpnNames to {}
        repeat with vpnMenuItem in vpnMenuItems
          set vpnName to name of vpnMenuItem
          if vpnName is equal to missing value then
            exit repeat
          end if
          set vpnNames to vpnNames & {vpnName}
        end repeat
        key code 53
        get vpnNames
      end tell
    end tell
EOF
    tr ',' '\n' | sed 's/^[[:space:]]//g' >$_lazy_connect_config_dir/vpns

  echo "Storing the VPN list..."
  if [ -f $backup_file ]; then
    echo -e "\nDiff:\n$(diff -y $backup_file $_lazy_connect_config_dir/vpns)"
  else
    echo -e "\nVPN List:"
    cat $_lazy_connect_config_dir/vpns | nl
  fi
}

function _lazy_connect_usage() {
  cat <<EOF

USAGE:

lazy-connect - Shell function to fuzzy search an IPSec VPN by name
               and connect to it automatically.

-i    - Initialize lazy-connect. Stores the TOTP secret and VPN list.
-r    - Refresh vpn list in ~/.config/lazy-connect .
-n    - Do not fill the password automatically. Instead copy the password to clipboard.
-h    - Show this help.
EOF
}

function _lazy_connect_get_totp() {
  secret_key=$1
  case $TOTP_MODE in
  oathtool)
    password=$(oathtool --totp --base32 $secret_key)
    return 0
    ;;
  yubikey)
    if ! [ -x "$(command -v ykman)" ]; then
      echo 'Error: ykman tool not installed.' >&2
      exit 1
    fi
    if [ -z "$LAZY_CONNECT_TOTP_QUERY" ]; then
      echo "Error: LAZY_CONNECT_TOTP_QUERY not set."
      exit 1
    else
      password=$(ykman oath code $LAZY_CONNECT_TOTP_QUERY 2>/dev/null | awk '{print $2}')
    fi
    ;;
  esac
}

function _lazy_connect() {
  vpn_name=$1
  _lazy_connect_get_totp $2
  local autofill=$3

  if [ -z "$password" ]; then
    case $TOTP_MODE in
    oathtool)
      echo "Error: Unable to generate otp using oathtool."
      return 1
      ;;
    yubikey)
      echo "Error: No YubiKey found."
      return 1
      ;;
    esac
  elif [ "$autofill" == "false" ]; then
    echo -n "$password" | pbcopy
  fi

  osascript <<EOF
    on connectVpn(vpnName, password, autofill)
      tell application "System Events"
        tell process "SystemUIServer"
          set vpnMenu to (menu bar item 1 of menu bar 1 where description is "VPN")
          tell vpnMenu to click
          try
            click menu item vpnName of menu 1 of vpnMenu
            if autofill is equal to "true" then
              delay 2
              keystroke password
              keystroke return
            end if
          on error errorStr
            if errorStr does not contain "Can’t get menu item" and errorStr does not contain vpnName then
              display dialog errorStr
            end if
          end try
        end tell
      end tell
    end connectVpn

    connectVpn("$vpn_name", "$password", "$autofill")
EOF
}

function _lazy_connect_mojave() {
  vpn_name=$1
  osx_vpn_name="${vpn_name/Connect /}, Not Connected"

  _lazy_connect_get_totp $2
  local autofill=$3

  if [ -z "$password" ]; then
    case $TOTP_MODE in
    oathtool)
      echo "Error: Unable to generate otp using oathtool."
      return 1
      ;;
    yubikey)
      echo "Error: No YubiKey found."
      return 1
      ;;
    esac
  elif [ "$autofill" == "false" ]; then
    echo -n "$password" | pbcopy
  fi

  osascript <<EOF
    on connectVpn(vpnName, password, autofill)
      tell application "System Preferences"
        reveal pane "Network"
        activate

        tell application "System Events"
            tell process "System Preferences"
                tell window 1
                    delay 1
                    repeat with r in rows of table 1 of scroll area 1
                        if (value of attribute "AXValue" of static text 1 of r as string) is equal to "$osx_vpn_name" then
                            select r
                        end if
                    end repeat

                    tell group 1
                        click button "Authentication Settings…"
                    end tell

                    tell sheet 1
                        set focused of text field 2 to true
                        set value of text field 2 to "$password"
                        click button "Ok"
                    end tell

                    click button "Apply"

            delay 1
                    tell group 1
                        click button "Connect"
            end tell

                end tell
            end tell
        end tell

        quit
    end tell
    end connectVpn

    connectVpn("$osx_vpn_name", "$password", "$autofill")
EOF
}

function _lazy_connect_ventura(){
  vpn_name=$1
  osx_vpn_name="${vpn_name/Connect /}"
  
  _lazy_connect_get_totp $2
  local autofill=$3

  if [ -z "$password" ]; then
    case $TOTP_MODE in
    oathtool)
      echo "Error: Unable to generate otp using oathtool."
      return 1
      ;;
    yubikey)
      echo "Error: No YubiKey found."
      return 1
      ;;
    esac
  elif [ "$autofill" == "false" ]; then
    echo -n "$password" | pbcopy
  fi
  
  osascript -l JavaScript > /dev/null <<-EOF
    function findGroupIndex(vpnName, areas) {
      let idx = -1
      for (let i = 0; i< areas.groups.length; i++) {
        let g = areas.groups[i]
        if (g.staticTexts[0].value() === vpnName) {
          idx = i
          break
        }
      }
      return idx
    }
    function connectVpn(vpnName, password, autofill) {
      // Reveal System Settings
      const app = Application("System Settings")
      app.reveal()
      const settings = Application("System Events").applicationProcesses.byName("System Settings")

      // Focus on it
      settings.frontmost = true

      // Wait for System Settings window appearing
      delay(0.5)

      // Reveal VPN panel
      settings.menuBars[0].menuBarItems["View"].menus["View"].menuItems["VPN"].click()

      // Wait for panel switching
      delay(0.5)

      // check the vpn name
      const areas = settings.windows[0].groups[0].splitterGroups[0].groups[1].groups[0].scrollAreas[0]
      let idx = findGroupIndex(vpnName, areas)

      let checkbox = areas.groups[idx].checkboxes[0]
      if (idx > -1 && checkbox.value() === 0) {
        const button = areas.groups[idx].buttons[0]
        if (button !== null) {
          button.click()
        }
        
        delay(0.5)
        
        const sheet = settings.windows[0].sheets[0]
        const dialogArea = sheet.groups[0].splitterGroups[0].groups[1]
        const authArea = dialogArea.scrollAreas[0].groups[2]

        const passwordField = authArea.textFields[1]
        passwordField.focused = true
        passwordField.value = password
        passwordField.focused = false

        const userField = authArea.textFields[0]
        userField.focused = true

        try {
          let ok = dialogArea.buttons[2]
          if (ok.enabled()) {
            ok.click()
          } else {
            throw "Could not OK"
          }
        } catch (e) {
          let cancel = dialogArea.buttons[1]
          if (cancel.enabled()) {
            cancel.click()
          }
        }
        
        delay(0.5)
        checkbox.click()
      }
      app.quit()
    }
    connectVpn("$osx_vpn_name", "$password", "$autofill")
EOF
}

function _lazy_connect_sonoma(){
  vpn_name=$1
  osx_vpn_name="${vpn_name/Connect /}"
  
  _lazy_connect_get_totp $2
  local autofill=$3

  if [ -z "$password" ]; then
    case $TOTP_MODE in
    oathtool)
      echo "Error: Unable to generate otp using oathtool."
      return 1
      ;;
    yubikey)
      echo "Error: No YubiKey found."
      return 1
      ;;
    esac
  elif [ "$autofill" == "false" ]; then
    echo -n "$password" | pbcopy
  fi
  
  osascript -l JavaScript > /dev/null <<-EOF
    function findSwitch(vpnName, areas) {
      let idx = -1
      for (let i = 0; i< areas.staticTexts.length; i++) {
        let text = areas.staticTexts[i]
        if (text.value() == vpnName) {
          idx = i
          break
        }
      }
      return idx/2
    }
    function connectVpn(vpnName, password, autofill) {
      // Reveal System Settings
      const app = Application("System Settings")
      app.reveal()
      const settings = Application("System Events").applicationProcesses.byName("System Settings")

      // Focus on it
      settings.frontmost = true

      // Wait for System Settings window appearing
      delay(0.5)

      // Reveal VPN panel
      settings.menuBars[0].menuBarItems["View"].menus["View"].menuItems["VPN"].click()

      // Wait for panel switching
      delay(0.5)

      // check the vpn name
      const areas = settings.windows[0].groups[0].splitterGroups[0].groups[1].groups[0].scrollAreas[0].groups[0]
      let idx = findSwitch(vpnName, areas)
      let s = areas.checkboxes[idx]
      s.click()
      delay(1)
      const notif = Application("System Events").applicationProcesses.byName("UserNotificationCenter")
      if (notif !== undefined && notif !== null) {
        const w = notif.windows[0]
        if (w !== undefined && w !== null) {
          const passwordField = w.textFields[0]
          passwordField.value = password
          const okButton = w.buttons[1]
          okButton.click()
        }
      }
      app.quit()
    }
    connectVpn("$osx_vpn_name", "$password", "$autofill")
EOF
}

version_lte() {
    [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
}

version_lt() {
    [ "$1" = "$2" ] && return 1 || version_lte $1 $2
}

function lazy-connect() {
  local OPTIND
  local autofill="true"
  mkdir -p $_lazy_connect_config_dir

  while getopts "irnh" opt; do
    case $opt in
    h)
      _lazy_connect_usage
      return 0
      ;;
    i)
      _lazy_connect_init
      return 0
      ;;
    r)
      echo "Refreshing VPN list..."
      _lazy_connect_vpn_refresh
      return 0
      ;;
    n)
      autofill="false"
      shift $((OPTIND - 1))
      ;;
    \?)
      echo "Invalid Option: -$OPTARG."
      _lazy_connect_usage
      return 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      _lazy_connect_usage
      return 1
      ;;
    esac
  done

  local secret=$(security find-generic-password -a lazy-connect -w 2>/dev/null | tr -d '\n')
  if [ -z "$secret" ]; then
    echo "Secret not found in keychain. Initialize lazy-connect and try again."
    return 1
  fi

  vpn_name=$(cat $_lazy_connect_config_dir/vpns |
    fzf --height=10 --ansi --reverse --query "$*" --select-1)

  mac_version=$(sw_vers -productVersion)
  is_less_than_sonoma=$(version_lt $mac_version 14.0 && echo "yes" || echo "no")
  is_less_than_ventura=$(version_lt $mac_version 13.0 && echo "yes" || echo "no")
  is_less_than_mojave=$(version_lt $mac_version 10.14 && echo "yes" || echo "no")
  if [ $is_less_than_mojave = "yes" ]; then
    [ -z "$vpn_name" ] || _lazy_connect "$vpn_name" "$secret" "$autofill"
  elif [ $is_less_than_ventura = "yes" ]; then
    [ -z "$vpn_name" ] || _lazy_connect_mojave "$vpn_name" "$secret" "$autofill"
  elif [ $is_less_than_sonoma = "yes" ]; then
    [ -z "$vpn_name" ] || _lazy_connect_ventura "$vpn_name" "$secret" "$autofill"
  else
    [ -z "$vpn_name" ] || _lazy_connect_sonoma "$vpn_name" "$secret" "$autofill"
  fi

}

lazy-connect "$@"
